num_trainings = 10
num_epochs = 20
learning_rate = 0.005
batch_size = 100

model:
self.cnn2_1 = nn.Sequential(
            nn.Conv2d(1, 32, 5),
            nn.ReLU(),
            nn.MaxPool2d(3),
        )
        
        self.cnn2_3 = nn.Sequential(
            nn.Conv2d(32, 64, 3),
            nn.ReLU(),
            nn.Conv2d(64, 64, 3),
            nn.ReLU(),
            # nn.MaxPool2d(3),
        )
            
        self.cnn2_4 = nn.Sequential(
            nn.Dropout2d(0.1),
            nn.Conv2d(64, 1024, (12, 7)),
            nn.ReLU(),
        )
            
        self.cnn2_5 = nn.Sequential(
            nn.Conv1d(1024, 2048, 1),
            nn.ReLU(),
            nn.Conv1d(2048, output_size, 1),
        )

        self.fc2 = nn.Sequential(
            nn.Linear(11 * 26 * 6, output_size),
        )

    def forward(self, x):
        x = self.cnn2_1(x)
        x = F.normalize(x)
        x = self.cnn2_3(x)
        x = F.normalize(x)
        x = self.cnn2_4(x)
        x = F.normalize(x)
        x = x.view(-1, 1024, 26 * 6)
        x = self.cnn2_5(x)
        x = x.view(-1, 11 * 26 * 6)
        x = self.fc2(x)

composed_transforms = torchvision.transforms.Compose(
        [
            Resize((26, 64), cv2.INTER_LINEAR),
            Normalize(),
            EqualizeHist(),
            Blur((5, 5)),
            Erode(),
            Resize((52, 128), cv2.INTER_LINEAR),
            ToTensor(),
        ]
    )

default datensplit